[{"/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/reportWebVitals.js":"1","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/App.js":"2","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/index.js":"3","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Profile.js":"4","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Header.js":"5","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Portfolio.js":"6","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Resume.js":"7","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Footer.js":"8","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/CustomTimeLine.js":"9","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/untils/resumeData.js":"10","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Button.js":"11"},{"size":362,"mtime":1612251702700,"results":"12","hashOfConfig":"13"},{"size":1100,"mtime":1613293764539,"results":"14","hashOfConfig":"13"},{"size":501,"mtime":1612254533349,"results":"15","hashOfConfig":"13"},{"size":2275,"mtime":1613287908861,"results":"16","hashOfConfig":"13"},{"size":1788,"mtime":1613431474165,"results":"17","hashOfConfig":"13"},{"size":3885,"mtime":1613431449068,"results":"18","hashOfConfig":"13"},{"size":8304,"mtime":1613444522885,"results":"19","hashOfConfig":"13"},{"size":665,"mtime":1613293300431,"results":"20","hashOfConfig":"13"},{"size":1375,"mtime":1613280373921,"results":"21","hashOfConfig":"13"},{"size":8088,"mtime":1614633892208,"results":"22","hashOfConfig":"13"},{"size":363,"mtime":1613286646489,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b1wqmp",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/reportWebVitals.js",[],"/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/App.js",[],"/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/index.js",[],"/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Profile.js",["49"],"/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Header.js",["50","51","52","53","54","55","56","57","58","59","60","61","62","63"],"/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Portfolio.js",["64","65","66","67","68"],"import {\n  Card,\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  Grow,\n  Tab,\n  Tabs,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport \"./Portfolio.css\";\nimport resumeData from \"../untils/resumeData\";\n\nconst Portfolio = () => {\n  const [tabValue, setTabValue] = useState(\"ALL\");\n  const [projectDialog, setProjectDialog] = useState(false);\n\n  return (\n    <Grid container spacing={1} className=\"section pb_45 pt_45\">\n      {/* title */}\n      <Grid item className=\"section_title mb_20\">\n        <span> </span>\n        <h6 className=\"section_title_text\">Projects</h6>\n      </Grid>\n\n      {/* Tabs */}\n      <Grid item xs={12}>\n        <Tabs\n          value={tabValue}\n          indicatorColor=\"white\"\n          className=\"customTabs\"\n          onChange={(event, newValue) => setTabValue(newValue)}\n        >\n          <Tab\n            label=\"ALL\"\n            value=\"ALL\"\n            className={\n              tabValue == \"ALL\" ? \"customTabs_item active\" : \"customTabs_item\"\n            }\n          />\n          {[...new Set(resumeData.projects.map((item) => item.tag))].map(\n            (tag) => (\n              <Tab\n                label={tag}\n                value={tag}\n                className={\n                  tabValue == tag ? \"customTabs_item active\" : \"customTabs_item\"\n                }\n              />\n            )\n          )}\n        </Tabs>\n      </Grid>\n      {/* Projects */}\n      <Grid item xs={12}>\n        <Grid container spacing={3}>\n          {resumeData.projects.map((project) => (\n            <>\n              {tabValue == project.tag || tabValue == \"ALL\" ? (\n                <Grid item xs={12} sm={6} md={4}>\n                  <Grow in timeout={1000}>\n                    <Card\n                      className=\"customCard\"\n                      onClick={() => setProjectDialog(project)}\n                    >\n                      <CardActionArea>\n                        <CardMedia\n                          className=\"customCard_image\"\n                          image={project.image}\n                          title={project.title}\n                        />\n                        <CardContent>\n                          <Typography\n                            variant={\"body2\"}\n                            className=\"customCard_title\"\n                          >\n                            {project.title}\n                          </Typography>\n                          <Typography\n                            variant=\"body2\"\n                            className=\"customCard_caption\"\n                          >\n                            {project.caption}\n                          </Typography>\n                        </CardContent>\n                      </CardActionArea>\n                    </Card>\n                  </Grow>\n                </Grid>\n              ) : null}\n            </>\n          ))}\n        </Grid>\n      </Grid>\n      {/* Dialog */}\n      <Dialog\n        open={projectDialog}\n        onClose={() => setProjectDialog(false)}\n        className=\"projectDialog\"\n        \n       \n      >\n        <DialogTitle onClose={() => setProjectDialog(false)}>\n          {projectDialog.title}{\" \"}\n        </DialogTitle>\n        <img src={projectDialog.image} alt=\"\" className=\"projectDialog_image\" />\n\n        <DialogContent>\n          <Typography className=\"projectDialog_description\">\n            {\" \"}\n            {projectDialog.description}\n          </Typography>\n        </DialogContent>\n        <DialogActions className=\"projectDialog_actions\">\n          {projectDialog?.links?.map((link) => (\n            <a href={link.link} target=\"_blank\" className=\"projectDialog_icon\">\n              {link.icon}\n            </a>\n          ))}\n        </DialogActions>\n      </Dialog>\n    </Grid>\n  );\n};\n\nexport default Portfolio;\n","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Resume.js",["69"],"import { Grid, Icon, Paper, TextField, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./Resume.css\";\nimport resumeData from \"../untils/resumeData\";\nimport CustomTimeLine, { CustomTimeLineSeparator } from \"./CustomTimeLine\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\nimport TimelineItem from \"@material-ui/lab/TimelineItem\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport TimelineDot from \"@material-ui/lab/TimelineDot\";\nimport CustomButton from \"./Button\";\nconst Resume = () => {\n  return (\n    <>\n      {/* about me  */}\n      <Grid container className=\"section pb_45 pt_45\">\n        <Grid item className=\"section_title mb_30\">\n          <span> </span>\n          <h6 className=\"section_title_text\">About Me</h6>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"body2\" className=\"aboutme_text\">\n            {resumeData.about}\n          </Typography>\n        </Grid>\n      </Grid>\n      {/* education and experiences */}\n      <Grid container className=\"section pb_45\">\n        <Grid item className=\"section_title mb_30\">\n          <span> </span>\n          <h6 className=\"section_title_text\">Resume</h6>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container className=\"resume_timeline\">\n            {/* experiences */}\n            <Grid item sm={12} md={6}>\n              <CustomTimeLine title=\"Work Experience\" icon={<WorkIcon />}>\n                {resumeData.experiences.map((experience) => (\n                  <TimelineItem>\n                    <CustomTimeLineSeparator />\n                    <TimelineContent className=\"timeline_content\">\n                      <Typography className=\"timeline_title\">\n                        {experience.title}\n                      </Typography>\n                      <Typography variant=\"caption\" className=\"timeline_date\">\n                        {experience.date}\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        className=\"timeline_description\"\n                      >\n                        {experience.description}\n                      </Typography>\n                    </TimelineContent>\n                  </TimelineItem>\n                ))}\n              </CustomTimeLine>\n            </Grid>\n            {/* Education */}\n            <Grid item sm={12} md={6}>\n              <CustomTimeLine title=\"Education\" icon={<SchoolIcon />}>\n                {resumeData.educations.map((education) => (\n                  <TimelineItem>\n                    <CustomTimeLineSeparator />\n                    <TimelineContent className=\"timeline_content\">\n                      <Typography className=\"timeline_title\">\n                        {education.title}\n                      </Typography>\n                      <Typography variant=\"caption\" className=\"timeline_date\">\n                        {education.date}\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        className=\"timeline_description\"\n                      >\n                        {education.description}\n                      </Typography>\n                    </TimelineContent>\n                  </TimelineItem>\n                ))}\n              </CustomTimeLine>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      {/* services */}\n      {/* <Grid container className=\"section pb_45\">\n        <Grid item className=\"section_title mb_30\">\n          <span> </span>\n          <h6 className=\"section_title_text\">Services</h6>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={3} justify=\"space-around\">\n            {resumeData.services.map((service) => (\n              <Grid item xs={12} sm={6} md={3}>\n                <div className=\"service\">\n                  <Icon className=\"service_icon\">{service.icon}</Icon>\n                  <Typography className=\"service_title\" variant=\"h6\">\n                    {service.title}\n                  </Typography>\n                  <Typography className=\"service_description\" variant=\"body2\">\n                    {service.description}\n                  </Typography>\n                </div>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid> */}\n      {/* skill */}\n      <Grid container className=\"section graybg pb_45 p_50\">\n      <Grid item className=\"section_title mb_30\">\n          <span> </span>\n          <h6 className=\"section_title_text\">Skills</h6>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container justify=\"space-between\" spacing={3}>\n            {resumeData.skills.map((skill) => (\n              <Grid item xs={12} sm={6} md={3}>\n                <Paper elevation={0} className=\"skill\">\n                  <Typography variant=\"h6\" className=\"skill_title\">\n                    {skill.title}\n                  </Typography>\n                  {skill.description.map((element) => (\n                    <Typography variant=\"body2\" className=\"skill_description\">\n                      <TimelineDot\n                        variant={\"outlined\"}\n                        className=\"timeline_dot\"\n                      />\n                      {element}\n                    </Typography>\n                  ))}\n                </Paper>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n      {/* contact */}\n      <Grid container  spacing={6} className=\"section pt_45 pb_45\">\n        {/* contact form left */}\n        <Grid item xs={12} lg={7}>\n          <Grid container>\n            <Grid item className=\"section_title mb_30\">\n              <span> </span>\n              <h6 className=\"section_title_text\">Contact Form</h6>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6}>\n                  <TextField fullWidth name=\"name\" label=\"Name\"></TextField>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField fullWidth name=\"email\" label=\"E-mail\"></TextField>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    name=\"message\"\n                    label=\"Message\"\n                    multiline\n                    rows={4}\n                  ></TextField>\n                </Grid>\n                <Grid item xs={12}>\n                  <CustomButton text=\"Submit\" />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n        {/* Contact information right */}\n        <Grid item xs={12} lg={5}>\n          <Grid container>\n            <Grid item className=\"section_title mb_30\">\n              <span> </span>\n              <h6 className=\"section_title_text\">Contact information</h6>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container >\n                <Grid item xs={12}>\n                  <Typography className=\"contactInfo_Item\">\n                    <span>Address: </span>\n                    {resumeData.address}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography className=\"contactInfo_Item\">\n                    <span>Phone: </span>\n                    {resumeData.phone}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography className=\"contactInfo_Item\">\n                    <span>Email: </span>\n                    {resumeData.email}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container className='contactInfo_socialsContainer'>\n                {Object.keys(resumeData.socials).map((key) => (\n                  <Grid item className='contactInfo_social'>\n                    <a href={resumeData.socials[key].link}>\n                      {resumeData.socials[key].icon}\n                    </a>\n                  </Grid>\n                ))}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Resume;\n","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Footer.js",[],"/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/CustomTimeLine.js",["70"],"import React from \"react\";\nimport Timeline from \"@material-ui/lab/Timeline\";\nimport TimelineItem from \"@material-ui/lab/TimelineItem\";\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\";\nimport TimelineConnector from \"@material-ui/lab/TimelineConnector\";\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\nimport TimelineDot from \"@material-ui/lab/TimelineDot\";\nimport WorkIcon from \"@material-ui/icons/Work\";\n\nimport \"./CustomTimeLine.css\";\nimport { Typography } from \"@material-ui/core\";\n\nconst CustomTimeLine = ({ title, children, icon }) => {\n  return (\n    <Timeline className=\"timeline\">\n      {/* {Item Header} */}\n      <TimelineItem className=\"timeline_firstItem\">\n        <TimelineSeparator>\n          <TimelineDot className={\"timeline_dot_header\"}>\n            {icon}\n          </TimelineDot>\n          <TimelineConnector />\n        </TimelineSeparator>\n        <TimelineContent>\n          <Typography variant=\"h6\" className={\"timeline_header\"}>\n            {title}\n          </Typography>\n        </TimelineContent>\n      </TimelineItem>\n      {children}\n\n    </Timeline>\n  );\n};\n\nexport const CustomTimeLineSeparator = () => (\n  <TimelineSeparator className={\"separator_padding\"}>\n    <TimelineDot variant={\"outlined\"} className={\"timeline_dot\"} />\n    <TimelineConnector />\n  </TimelineSeparator>\n);\n\nexport default CustomTimeLine;\n","/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/untils/resumeData.js",["71"],"/Users/Alan/Desktop/Project/profilio/profillioFeb/profiliofeb/src/components/Button.js",[],{"ruleId":"72","severity":1,"message":"73","line":19,"column":26,"nodeType":"74","endLine":19,"endColumn":41},{"ruleId":"75","severity":1,"message":"76","line":4,"column":3,"nodeType":"77","messageId":"78","endLine":4,"endColumn":9},{"ruleId":"75","severity":1,"message":"79","line":5,"column":3,"nodeType":"77","messageId":"78","endLine":5,"endColumn":7},{"ruleId":"75","severity":1,"message":"80","line":6,"column":3,"nodeType":"77","messageId":"78","endLine":6,"endColumn":14},{"ruleId":"75","severity":1,"message":"81","line":9,"column":3,"nodeType":"77","messageId":"78","endLine":9,"endColumn":14},{"ruleId":"75","severity":1,"message":"82","line":11,"column":10,"nodeType":"77","messageId":"78","endLine":11,"endColumn":14},{"ruleId":"75","severity":1,"message":"83","line":15,"column":3,"nodeType":"77","messageId":"78","endLine":15,"endColumn":16},{"ruleId":"75","severity":1,"message":"84","line":16,"column":3,"nodeType":"77","messageId":"78","endLine":16,"endColumn":14},{"ruleId":"75","severity":1,"message":"85","line":17,"column":3,"nodeType":"77","messageId":"78","endLine":17,"endColumn":11},{"ruleId":"75","severity":1,"message":"86","line":18,"column":3,"nodeType":"77","messageId":"78","endLine":18,"endColumn":10},{"ruleId":"75","severity":1,"message":"87","line":19,"column":3,"nodeType":"77","messageId":"78","endLine":19,"endColumn":11},{"ruleId":"75","severity":1,"message":"88","line":20,"column":3,"nodeType":"77","messageId":"78","endLine":20,"endColumn":9},{"ruleId":"89","severity":1,"message":"90","line":46,"column":33,"nodeType":"91","messageId":"92","endLine":46,"endColumn":35},{"ruleId":"89","severity":1,"message":"90","line":55,"column":33,"nodeType":"91","messageId":"92","endLine":55,"endColumn":35},{"ruleId":"72","severity":1,"message":"73","line":65,"column":52,"nodeType":"74","endLine":65,"endColumn":67},{"ruleId":"89","severity":1,"message":"90","line":44,"column":24,"nodeType":"91","messageId":"92","endLine":44,"endColumn":26},{"ruleId":"89","severity":1,"message":"90","line":53,"column":28,"nodeType":"91","messageId":"92","endLine":53,"endColumn":30},{"ruleId":"89","severity":1,"message":"90","line":65,"column":25,"nodeType":"91","messageId":"92","endLine":65,"endColumn":27},{"ruleId":"89","severity":1,"message":"90","line":65,"column":52,"nodeType":"91","messageId":"92","endLine":65,"endColumn":54},{"ruleId":"72","severity":1,"message":"73","line":122,"column":33,"nodeType":"74","endLine":122,"endColumn":48},{"ruleId":"75","severity":1,"message":"93","line":1,"column":16,"nodeType":"77","messageId":"78","endLine":1,"endColumn":20},{"ruleId":"75","severity":1,"message":"94","line":8,"column":8,"nodeType":"77","messageId":"78","endLine":8,"endColumn":16},{"ruleId":"95","severity":1,"message":"96","line":6,"column":1,"nodeType":"97","endLine":233,"endColumn":5},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'FormControl' is defined but never used.","'NavDropdown' is defined but never used.","'Link' is defined but never used.","'SchoolRounded' is defined but never used.","'WorkRounded' is defined but never used.","'FaceBook' is defined but never used.","'Twitter' is defined but never used.","'LinkedIn' is defined but never used.","'GitHub' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Icon' is defined but never used.","'WorkIcon' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]